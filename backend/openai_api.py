# backend/openai_api.py

import openai
import os
from dotenv import load_dotenv
from typing import List

# üîπ Carrega vari√°veis do .env com caminho expl√≠cito
dotenv_path = os.path.join(os.path.dirname(__file__), "..", ".env")
load_dotenv(dotenv_path)

# üîπ Define a chave da OpenAI corretamente
openai.api_key = os.getenv("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")  # ‚úÖ Correto

# üîπ Fun√ß√£o para gerar explica√ß√µes com IA
def gerar_explicacao(pergunta: str) -> str:
    try:
        resposta = openai.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "Voc√™ √© um professor que explica de forma clara e objetiva para estudantes do ensino m√©dio."},
                {"role": "user", "content": f"Explique de forma clara: {pergunta}"}
            ],
            max_tokens=300,
            temperature=0.7
        )
        return resposta.choices[0].message.content.strip()
    except Exception as e:
        return f"Erro ao gerar explica√ß√£o: {str(e)}"

# üîπ Fun√ß√£o para gerar perguntas com base em uma mat√©ria e n√≠vel
def gerar_perguntas(materia: str, dificuldade: str = "f√°cil") -> List[str]:
    prompt = f"Crie 3 perguntas de m√∫ltipla escolha sobre {materia} com n√≠vel de dificuldade {dificuldade}, adequadas para ensino m√©dio."
    try:
        resposta = openai.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "Voc√™ √© um gerador de perguntas escolares."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=500,
            temperature=0.8
        )
        texto = resposta.choices[0].message.content.strip()
        perguntas = texto.split("\n\n") if "\n\n" in texto else texto.split("\n")
        return [p.strip() for p in perguntas if p.strip()]
    except Exception as e:
        return [f"Erro ao gerar perguntas: {str(e)}"]

# üîπ IA para gerar perguntas com base no conte√∫do fixo
def gerar_perguntas_por_materia(materia: str, dificuldade: str = "media") -> List[str]:
    perguntas = {
        "Matem√°tica": {
            "facil": ["Quanto √© 2 + 2?", "Qual √© o dobro de 5?"],
            "media": ["Resolva: 3x - 2 = 7", "Qual √© a √°rea de um quadrado de lado 4?"],
            "dificil": ["Derive a fun√ß√£o f(x) = 3x¬≤ + 2x", "Resolva a equa√ß√£o log(x) + log(2) = 1"]
        },
        "Portugu√™s": {
            "facil": ["Qual √© o ant√¥nimo de 'alegre'?", "Complete: O sol ____ brilhando."],
            "media": ["O que √© um adjetivo?", "Identifique o sujeito na frase: 'Os alunos estudaram bastante.'"],
            "dificil": ["Explique a fun√ß√£o sint√°tica do termo destacado na frase: 'Jo√£o, que √© m√©dico, chegou cedo.'"]
        },
        "Hist√≥ria": {
            "facil": ["Quem descobriu o Brasil?", "Em que ano foi proclamada a independ√™ncia do Brasil?"],
            "media": ["Explique a import√¢ncia da Revolu√ß√£o Francesa.", "O que foi o per√≠odo da Ditadura Militar no Brasil?"],
            "dificil": ["Compare o feudalismo europeu com o sistema colonial brasileiro."]
        },
        "Biologia": {
            "facil": ["O que √© fotoss√≠ntese?", "Qual √≥rg√£o √© respons√°vel pela respira√ß√£o?"],
            "media": ["Explique a fun√ß√£o dos ribossomos.", "O que s√£o c√©lulas-tronco?"],
            "dificil": ["Explique a replica√ß√£o do DNA passo a passo."]
        }
    }
    return perguntas.get(materia, {}).get(dificuldade, ["Pergunta n√£o encontrada para essa mat√©ria."])

# üîπ IA para trechos de leitura (Literatura)
def selecionar_trecho_literatura() -> dict:
    trecho = (
        "Ningu√©m escreve para o outro. Escreve-se para preencher o vazio de si mesmo. "
        "Mas quando o outro se reconhece nesse vazio, nasce a literatura."
    )
    autor = "Mia Couto"
    perguntas = [
        "O que o autor quer dizer com 'preencher o vazio de si mesmo'?",
        "Como a literatura conecta o autor e o leitor nesse trecho?",
        "Voc√™ concorda com a ideia apresentada? Por qu√™?",
        "Interprete a frase: 'nasce a literatura'.",
        "Qual √© o tom emocional do trecho?"
    ]
    return {
        "autor": autor,
        "trecho": trecho,
        "perguntas": perguntas
    }

# üîπ IA para perguntas personalizadas com base no desempenho
def gerar_perguntas_personalizadas(dados_desempenho: dict) -> List[str]:
    prompt = f"""
    Com base no seguinte desempenho do aluno, gere 3 perguntas de refor√ßo:
    {dados_desempenho}
    As perguntas devem ser objetivas, variadas e focadas nas dificuldades apresentadas.
    """
    try:
        resposta = openai.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "Voc√™ √© um gerador de perguntas personalizadas para estudo."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=500,
            temperature=0.7
        )
        texto = resposta.choices[0].message.content.strip()
        return [p.strip() for p in texto.split("\n") if p.strip()]
    except Exception as e:
        return [f"Erro ao gerar perguntas personalizadas: {str(e)}"]

# üîπ IA para mensagem motivacional
def gerar_mensagem_motivacional(dados_desempenho: dict) -> str:
    prompt = f"""
    Com base no desempenho a seguir, gere uma mensagem motivacional personalizada para o aluno:

    {dados_desempenho}

    A mensagem deve ser positiva, curta (m√°ximo 2 frases), encorajadora e motivadora.
    """
    try:
        resposta = openai.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "Voc√™ √© um tutor escolar que motiva alunos com mensagens curtas e positivas."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=150,
            temperature=0.8
        )
        return resposta.choices[0].message.content.strip()
    except Exception as e:
        return f"N√£o foi poss√≠vel gerar a mensagem motivacional: {str(e)}"











